// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyFtpServer.DAL.EF;

#nullable disable

namespace MyFtpServer.DAL.Migrations
{
    [DbContext(typeof(FileStorageDBContext))]
    [Migration("20231226093500_RemoveFavoriteColumn")]
    partial class RemoveFavoriteColumn
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MyFtpServer.DAL.Entities.AccessStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("Id");

                    b.ToTable("AccessStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "The person who create folder or file",
                            Name = "Owner"
                        },
                        new
                        {
                            Id = 2,
                            Description = "The person who can view or edit folder or file",
                            Name = "Shared"
                        },
                        new
                        {
                            Id = 3,
                            Description = "The person who can view folder or file",
                            Name = "Viewer"
                        });
                });

            modelBuilder.Entity("MyFtpServer.DAL.Entities.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 10000L);

                    b.Property<string>("Avatar")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 12, 26, 16, 35, 0, 254, DateTimeKind.Local).AddTicks(7593));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            Id = 10000,
                            CreateDate = new DateTime(2023, 12, 26, 16, 35, 0, 257, DateTimeKind.Local).AddTicks(4356),
                            Email = "tuan",
                            FirstName = "Admin",
                            IsDeleted = false,
                            LastName = "Admin",
                            Password = "tuan"
                        },
                        new
                        {
                            Id = 10001,
                            CreateDate = new DateTime(2023, 12, 26, 16, 35, 0, 257, DateTimeKind.Local).AddTicks(4366),
                            Email = "user",
                            FirstName = "User",
                            IsDeleted = false,
                            LastName = "User",
                            Password = "user"
                        });
                });

            modelBuilder.Entity("MyFtpServer.DAL.Entities.File", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("IdParent")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("IdParent");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("MyFtpServer.DAL.Entities.FileAccess", b =>
                {
                    b.Property<string>("IdFile")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<int>("IdAccess")
                        .HasColumnType("int");

                    b.Property<int>("IdAccount")
                        .HasColumnType("int");

                    b.HasKey("IdFile", "IdAccess", "IdAccount");

                    b.HasIndex("IdAccess");

                    b.HasIndex("IdAccount");

                    b.ToTable("FileAccesses");
                });

            modelBuilder.Entity("MyFtpServer.DAL.Entities.Folder", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdParent")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("IdParent");

                    b.ToTable("Folders");
                });

            modelBuilder.Entity("MyFtpServer.DAL.Entities.FolderAccess", b =>
                {
                    b.Property<string>("IdFolder")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<int>("IdAccess")
                        .HasColumnType("int");

                    b.Property<int>("IdAccount")
                        .HasColumnType("int");

                    b.HasKey("IdFolder", "IdAccess", "IdAccount");

                    b.HasIndex("IdAccess");

                    b.HasIndex("IdAccount");

                    b.ToTable("FolderAccesses");
                });

            modelBuilder.Entity("MyFtpServer.DAL.Entities.File", b =>
                {
                    b.HasOne("MyFtpServer.DAL.Entities.Folder", "ParentFolder")
                        .WithMany("Files")
                        .HasForeignKey("IdParent")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentFolder");
                });

            modelBuilder.Entity("MyFtpServer.DAL.Entities.FileAccess", b =>
                {
                    b.HasOne("MyFtpServer.DAL.Entities.AccessStatus", "Role")
                        .WithMany("FileAccesses")
                        .HasForeignKey("IdAccess")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyFtpServer.DAL.Entities.Account", "Account")
                        .WithMany("FileAccesses")
                        .HasForeignKey("IdAccount")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyFtpServer.DAL.Entities.File", "File")
                        .WithMany("FileAccesses")
                        .HasForeignKey("IdFile")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("File");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("MyFtpServer.DAL.Entities.Folder", b =>
                {
                    b.HasOne("MyFtpServer.DAL.Entities.Folder", "ParentFolder")
                        .WithMany("SubFolders")
                        .HasForeignKey("IdParent")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentFolder");
                });

            modelBuilder.Entity("MyFtpServer.DAL.Entities.FolderAccess", b =>
                {
                    b.HasOne("MyFtpServer.DAL.Entities.AccessStatus", "Role")
                        .WithMany("FolderAccesses")
                        .HasForeignKey("IdAccess")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyFtpServer.DAL.Entities.Account", "Account")
                        .WithMany("FolderAccesses")
                        .HasForeignKey("IdAccount")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyFtpServer.DAL.Entities.Folder", "Folder")
                        .WithMany("FolderAccesses")
                        .HasForeignKey("IdFolder")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Folder");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("MyFtpServer.DAL.Entities.AccessStatus", b =>
                {
                    b.Navigation("FileAccesses");

                    b.Navigation("FolderAccesses");
                });

            modelBuilder.Entity("MyFtpServer.DAL.Entities.Account", b =>
                {
                    b.Navigation("FileAccesses");

                    b.Navigation("FolderAccesses");
                });

            modelBuilder.Entity("MyFtpServer.DAL.Entities.File", b =>
                {
                    b.Navigation("FileAccesses");
                });

            modelBuilder.Entity("MyFtpServer.DAL.Entities.Folder", b =>
                {
                    b.Navigation("Files");

                    b.Navigation("FolderAccesses");

                    b.Navigation("SubFolders");
                });
#pragma warning restore 612, 618
        }
    }
}
